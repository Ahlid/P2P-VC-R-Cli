add_headers(Authorization = paste('Bearer', user_session_token)),
body = body,
enconde = 'json'
)
if (r$status_code == 200) {
token <- fromJSON(content(r, "text"), flatten = TRUE)
## healthz function o keep alive
alive <- function() {
print('hz')
tryCatch({
GET(
paste(base_url, "/volunteer/healthz", sep = ''),
add_headers(Authorization = paste('Bearer', token)),
enconde = 'json'
)
}, error = function(error_condition) {
print(error_condition)
})
}  # replace with your function
assign("alive", alive, .GlobalEnv)
tclTaskSchedule(5000, alive(), id = "alive", redo = TRUE)
assign("volunteer_session_token", token$token, .GlobalEnv)
print("Logged in.")
r <- plumb("volunteerREST.R")
assign("server", r, .GlobalEnv)
r$registerHook('exit',  function(req) {
print("hz stopped")
tclTaskDelete("alive")
})
v %<-% {
r$run(port = port)
}
}
}
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
startVolunteer <- function(machineId, port) {
body <- list(port = port)
r <-
POST(
paste(
base_url,
paste("/machine/{", machineId, "}/startVolunteer", sep = ''),
sep = ''
),
add_headers(Authorization = paste('Bearer', user_session_token)),
body = body,
enconde = 'json'
)
if (r$status_code == 200) {
token <- fromJSON(content(r, "text"), flatten = TRUE)
## healthz function o keep alive
alive <- function() {
print('hz')
tryCatch({
GET(
paste(base_url, "/volunteer/healthz", sep = ''),
add_headers(Authorization = paste('Bearer', token)),
enconde = 'json'
)
}, error = function(error_condition) {
print(error_condition)
})
}  # replace with your function
assign("alive", alive, .GlobalEnv)
tclTaskSchedule(5000, alive(), id = "alive", redo = TRUE)
assign("volunteer_session_token", token$token, .GlobalEnv)
print("Logged in.")
r <- plumb("volunteerREST.R")
assign("server", r, .GlobalEnv)
r$registerHook('exit',  function(req) {
print("hz stopped")
tclTaskDelete("alive")
})
r$run(port = port)
}
}
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',12345)
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
install.packages("httr")
install.packages("httr")
install.packages("jsonlite")
install.packages("plumber")
install.packages("future")
install.packages("tcltk2")
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
listJobs()
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
listJobs()
register("t@h.com",1234214)
test <- function(){
print('HELLO')
}
tclTaskSchedule(10000, test, id = 'test', redo = FALSE)
tclTaskChange('test', test, 10000, redo = false)
tclTaskSchedule(10000, test, id = 'test', redo = FALSE)
tclTaskChange('test', test, 10000, redo = false)
tclTaskChange('test', test, 10000, redo = FALSE)
base_i = 0
test <- function(){
base_i++
}
test <- function(){
base_i=base_i + 1
}
tclTaskSchedule(10000, test, id = 'test', redo = FALSE)
tclTaskChange('test', test, 10000, redo = FALSE)
tclTaskSchedule(10000, test(), id = 'test', redo = FALSE)
tclTaskChange('test', test(), 10000, redo = FALSE)
base_i
test <- function () cat("==== Hello from Tcl! ====\n")
tclTaskSchedule(1000, test())
tclTaskSchedule(10000, test(), id = 'test', redo = FALSE)
tclTaskSchedule(10000, test(), id = 'test', redo = FALSE)
tclTaskChange('test', test(), 10000, redo = FALSE)
test <- function (i) cat("==== Hello from Tcl " + i + "! ====\n")
tclTaskSchedule(1000, test(1), id = 'test', redo = FALSE)
test <- function (i) cat(paste("==== Hello from Tcl", i , "! ====\n"))
tclTaskSchedule(1000, test(1), id = 'test', redo = FALSE)
tclTaskChange('test', test(2), 10000, redo = FALSE)
tclTaskSchedule(1000, test(1), id = 'test', redo = FALSE)
tclTaskChange('test', test(2), 10000, redo = FALSE)
tclTaskSchedule(10000, test(1), id = 'test', redo = FALSE)
tclTaskChange('test', test(2), 10000, redo = FALSE)
install.packages("httr")
install.packages("jsonlite")
install.packages("plumber")
install.packages("future")
install.packages("tcltk2")
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
register("a@a.c",1234)
addMachine('d',100000, 100000000, 10000000000, 1)
addMachine('d',100000, 100000000, 100000, 1)
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f')
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
tclTaskSchedule(500, alive(), id = "alive", redo = TRUE)
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
library(subprocess)
library(rJava)
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
source('./JavaPeer.R')
startJava <- function(email, password, machineId){
library(rJava)
.jinit("C:/Users/tiago/IdeaProjects/withMaven/target/classes")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/charsets.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/deploy.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/access-bridge-64.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/cldrdata.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/dnsns.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/jaccess.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/jfxrt.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/localedata.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/nashorn.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/sunec.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/sunjce_provider.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/sunmscapi.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/sunpkcs11.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/zipfs.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/javaws.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/jce.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/jfr.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/jfxswt.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/jsse.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/management-agent.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/plugin.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/resources.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/rt.jar")
.jaddClassPath("C:/Users/tiago/IdeaProjects/withMaven/target/classes")
.jaddClassPath("C:/Users/tiago/.m2/repository/io/socket/socket.io-client/1.0.0/socket.io-client-1.0.0.jar")
.jaddClassPath("C:/Users/tiago/.m2/repository/io/socket/engine.io-client/1.0.0/engine.io-client-1.0.0.jar")
.jaddClassPath("C:/Users/tiago/.m2/repository/com/squareup/okhttp3/okhttp/3.8.1/okhttp-3.8.1.jar")
.jaddClassPath("C:/Users/tiago/.m2/repository/com/squareup/okio/okio/1.13.0/okio-1.13.0.jar")
.jaddClassPath("C:/Users/tiago/.m2/repository/org/json/json/20171018/json-20171018.jar")
obj <- .jnew("Main")
s <- .jcall(obj, returnSig = "V", "main", .jarray(c(email,password,machineId)) )
}
startJava("t","t",63f53e57-8c58-4d36-bc50-b41d145de0cc")
startJava("t","t","63f53e57-8c58-4d36-bc50-b41d145de0cc")
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
library(subprocess)
library(rJava)
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
source('./JavaPeer.R')
startJava("t","t","63f53e57-8c58-4d36-bc50-b41d145de0cc")
.remotIST
View(.remoteIST)
View(.remotIST)
.remotIST
.remotIST$Java
.remotIST$JavaMachine
parent.env(.remotIST)
ls(.remotIST)
startJava("t","t","63f53e57-8c58-4d36-bc50-b41d145de0cc")
install.packages("rJava")
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
library(subprocess)
library(rJava)
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
source('./JavaPeer.R')
startJava("t","t","63f53e57-8c58-4d36-bc50-b41d145de0cc")
stopJava()
stopJava <- function (){
s <- .jcall(.remotIST$JavaMachine, returnSig = "V", "stop")
}
stopJava <- function (){
s <- .jcall(.remotIST$JavaMachine, returnSig = "V", "stop")
}
stopJava()
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
library(subprocess)
library(rJava)
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
source('./JavaPeer.R')
startJava("t","t","63f53e57-8c58-4d36-bc50-b41d145de0cc")
stopJava()
k
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
library(subprocess)
library(rJava)
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
source('./JavaPeer.R')
startJava("t","t","63f53e57-8c58-4d36-bc50-b41d145de0cc")
stopJava()
startJava("t","t","63f53e57-8c58-4d36-bc50-b41d145de0cc")
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
library(subprocess)
library(rJava)
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
source('./JavaPeer.R')
startJava("t","t","63f53e57-8c58-4d36-bc50-b41d145de0cc")
stopJava()
startJava("t","t","63f53e57-8c58-4d36-bc50-b41d145de0cc")
stopJava()
startJava <- function(token, port, machineId, machineToken){
library(rJava)
.jinit("C:/Users/tiago/IdeaProjects/withMaven/target/classes")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/charsets.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/deploy.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/access-bridge-64.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/cldrdata.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/dnsns.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/jaccess.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/jfxrt.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/localedata.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/nashorn.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/sunec.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/sunjce_provider.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/sunmscapi.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/sunpkcs11.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/ext/zipfs.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/javaws.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/jce.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/jfr.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/jfxswt.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/jsse.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/management-agent.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/plugin.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/resources.jar")
.jaddClassPath("C:/Program Files/Java/jdk1.8.0_241/jre/lib/rt.jar")
.jaddClassPath("C:/Users/tiago/IdeaProjects/withMaven/target/classes")
.jaddClassPath("C:/Users/tiago/.m2/repository/io/socket/socket.io-client/1.0.0/socket.io-client-1.0.0.jar")
.jaddClassPath("C:/Users/tiago/.m2/repository/io/socket/engine.io-client/1.0.0/engine.io-client-1.0.0.jar")
.jaddClassPath("C:/Users/tiago/.m2/repository/com/squareup/okhttp3/okhttp/3.8.1/okhttp-3.8.1.jar")
.jaddClassPath("C:/Users/tiago/.m2/repository/com/squareup/okio/okio/1.13.0/okio-1.13.0.jar")
.jaddClassPath("C:/Users/tiago/.m2/repository/org/json/json/20171018/json-20171018.jar")
obj <- .jnew("Main")
s <- .jcall(obj, returnSig = "V", "main", .jarray(c(token, port, machineId, machineToken)) )
.remotIST$JavaMachine <- obj
}
stopJava <- function (){
s <- .jcall(.remotIST$JavaMachine, returnSig = "V", "stop")
}
addMachine("teste","500000","5000000","50000",15)
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
library(subprocess)
library(rJava)
addMachine("teste","500000","5000000","50000",15)
startVolunteer('f2beb415-6c42-4e37-8d69-8aeba2edd465
', 5000)
startVolunteer("f2beb415-6c42-4e37-8d69-8aeba2edd465", 5000)
startVolunteer <- function(machineId, port) {
body <- list(port = port)
r <-
POST(
paste(
base_url,
paste("/machine/", machineId, "/startVolunteer", sep = ''),
sep = ''
),
add_headers(Authorization = paste('Bearer', user_session_token)),
body = body,
enconde = 'json'
)
if (r$status_code == 200) {
token <- fromJSON(content(r, "text"), flatten = TRUE)
## healthz function o keep alive
alive <- function() {
print('hz')
tryCatch({
GET(
paste(base_url, "/volunteer/healthz", sep = ''),
add_headers(Authorization = paste('Bearer', token)),
enconde = 'json'
)
}, error = function(error_condition) {
print(error_condition)
})
}  # replace with your function
assign("alive", alive, .GlobalEnv)
tclTaskSchedule(5000, alive(), id = "alive", redo = TRUE)
assign("volunteer_session_token", token$token, .GlobalEnv)
startJava(user_session_token, port+10, machineId, token$token)
print("Logged in.")
r <- plumb("volunteerREST.R")
assign("server", r, .GlobalEnv)
r$registerHook('exit',  function(req) {
print("hz stopped")
tclTaskDelete("alive")
})
r$run(port = port)
print("STRUCK")
}
}
setVolunteerState <- function(state){
POST(
paste(base_url, "/volunteer/setState", sep = ""),
add_headers(Authorization = paste("Bearer", volunteer_session_token)),
body = list(state = state)
)
}
sendVolunteerComputingError <- function(id ,err){
POST(paste(base_url, '/job/', id, '/error', sep = ''),
body = list(err = paste("MY_ERROR:  ", err)))
}
startVolunteer("f2beb415-6c42-4e37-8d69-8aeba2edd465", 5000)
stopJava()
startVolunteer <- function(machineId, port) {
body <- list(port = port)
r <-
POST(
paste(
base_url,
paste("/machine/", machineId, "/startVolunteer", sep = ''),
sep = ''
),
add_headers(Authorization = paste('Bearer', user_session_token)),
body = body,
enconde = 'json'
)
if (r$status_code == 200) {
token <- fromJSON(content(r, "text"), flatten = TRUE)
## healthz function o keep alive
alive <- function() {
print('hz')
tryCatch({
GET(
paste(base_url, "/volunteer/healthz", sep = ''),
add_headers(Authorization = paste('Bearer', token)),
enconde = 'json'
)
}, error = function(error_condition) {
print(error_condition)
})
}  # replace with your function
assign("alive", alive, .GlobalEnv)
tclTaskSchedule(5000, alive(), id = "alive", redo = TRUE)
assign("volunteer_session_token", token$token, .GlobalEnv)
startJava(user_session_token, port+10, machineId, token$token)
print("Logged in.")
r <- plumb("volunteerREST.R")
assign("server", r, .GlobalEnv)
r$registerHook('exit',  function(req) {
print("hz stopped")
stopJava()
tclTaskDelete("alive")
})
r$run(port = port)
print("STRUCK")
}
}
setVolunteerState <- function(state){
POST(
paste(base_url, "/volunteer/setState", sep = ""),
add_headers(Authorization = paste("Bearer", volunteer_session_token)),
body = list(state = state)
)
}
sendVolunteerComputingError <- function(id ,err){
POST(paste(base_url, '/job/', id, '/error', sep = ''),
body = list(err = paste("MY_ERROR:  ", err)))
}
startVolunteer("f2beb415-6c42-4e37-8d69-8aeba2edd465", 5000)
startVolunteer("f2beb415-6c42-4e37-8d69-8aeba2edd465", 5000)
stopJava()
startVolunteer("f2beb415-6c42-4e37-8d69-8aeba2edd465", 5000)
startVolunteer("f2beb415-6c42-4e37-8d69-8aeba2edd465", 5000)
