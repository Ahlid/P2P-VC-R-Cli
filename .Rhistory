attr(xts_count_rides, 'frequency') <- 168
attr(xts_count_sales, 'frequency') <- 168
install.packages("forecast")
library("forecast")
View(xts_count_sales[,1])
fit <- auto.arima(xts_count_sales[,1], D = 1, seasonal = TRUE)
summary(fit)
fcast <- forecast(fit, h=168)
plot(fcast, include = 168, main="Taxicab Pickup Count in Times Square by Time", xlab="Date", ylab="Pickup Count", xaxt="n", col="red", fcol="blue")
ticks <- seq(3, 5, 1/7)
dates <- seq(as.Date("2016-01-15"), as.Date("2016-01-29"), by="days")
dates <- format(dates, "%m-%d %H:%M")
axis(1, at=ticks, labels=dates)
legend('topleft', legend=c("Observed Value", "Predicted Value"), col=c("red", "blue"), lwd=c(2.5,2.5))
plot(fcast, include = 168, main="Taxicab Pickup Count in Times Square by Time", xlab="Date", ylab="Pickup Count", xaxt="n", col="red", fcol="blue")
ticks <- seq(3, 5, 1/7)
dates <- seq(as.Date("2016-01-15"), as.Date("2016-01-29"), by="days")
dates <- format(dates, "%m-%d %H:%M")
axis(1, at=ticks, labels=dates)
legend('topleft', legend=c("Observed Value", "Predicted Value"), col=c("red", "blue"), lwd=c(2.5,2.5))
plot(fcast, include = 168, main="Taxicab Pickup Count in Times Square by Time", xlab="Date", ylab="Pickup Count", xaxt="n", col="red", fcol="blue")
ticks <- seq(3, 5, 1/7)
dates <- seq(as.Date("2016-01-15"), as.Date("2016-01-29"), by="days")
dates <- format(dates, "%m-%d %H:%M")
axis(1, at=ticks, labels=dates)
legend('topleft', legend=c("Observed Value", "Predicted Value"), col=c("red", "blue"), lwd=c(2.5,2.5))
plot(fcast, include = 168, main="Taxicab Pickup Count in Times Square by Time", xlab="Date", ylab="Pickup Count", xaxt="n", col="red", fcol="blue")
plot(fcast, include = 168, main="Taxicab Pickup Count in Times Square by Time", xlab="Date", ylab="Pickup Count", xaxt="n", col="red", fcol="blue")
warnings()
ticks <- seq(3, 5, 1/7)
dates <- seq(as.Date("2017-06-15"), as.Date("2017-06-29"), by="days")
dates <- format(dates, "%m-%d %H:%M")
axis(1, at=ticks, labels=dates)
plot(fcast, include = 20, main="Taxicab Pickup Count in Times Square by Time", xlab="Date", ylab="Pickup Count", xaxt="n", col="red", fcol="blue")
plot(fcast, include = 10, main="Taxicab Pickup Count in Times Square by Time", xlab="Date", ylab="Pickup Count", xaxt="n", col="red", fcol="blue")
plot(fcast, main="Taxicab Pickup Count in Times Square by Time", xlab="Date", ylab="Pickup Count", xaxt="n", col="red", fcol="blue")
fcast
xts_count_sales <- xts(count_sales_train$amount, order.by = as.POSIXct(count_sales_train$bucket, format = "%Y-%m-%d %H:%M:%S"))
xts_count_sales
xts_count_sales <- xts(count_sales_train$amount, order.by = as.POSIXct(count_sales_train$bucket, format = "%Y-%m-%d %H:%M:%S"))
count_sales_train$amount
attr(xts_count_sales, 'frequency') <- 7
xts_count_sales
xts_count_sales <- xts(count_sales_train$amount, order.by = as.POSIXct(count_sales_train$bucket, format = "%Y-%m-%d"))
xts_count_sales
xts_count_sales <- xts(count_sales_train$amount, order.by = as.POSIXct(count_sales_train$bucket, format = "%Y-%m-%d"))
attr(xts_count_sales, 'frequency') <- 24
xts_count_sales
fit
summary(fit)
fit <- auto.arima(count_sales_train [,1], D = 1, seasonal = TRUE)
count_sales_train
count_sales_train [,1]
count_sales_train [,2]
fit <- auto.arima(count_sales_train [,2], D = 1, seasonal = TRUE)
summary(fit)
fit <- auto.arima(count_sales_train [,2], D = 1, seasonal = TRUE)
xts_count_rides <- xts(count_sales_train$amount, order.by = as.POSIXct(count_sales_train$bucket, format = "%Y-%m-%d %H:%M:%S"))
fit
xts_count_rides
head(xts_count_rides)
summary(count_sales_train)
?xts
xts_count_rides <- xts(count_sales_train$amount, order.by = count_sales_train$bucket )
xts_count_rides
xts_count_rides <- xts(count_sales_train$amount, order.by = count_sales_train$bucket, frequency=2 )
xts_count_rides
xts_count_rides <- xts(count_sales_train$amount, order.by = count_sales_train$bucket, frequency=200 )
xts_count_rides
xts_count_rides <- xts(count_sales_train$amount, order.by = count_sales_train$bucket, frequency=20000000 )
xts_count_rides
x <- as.xts(count_sales_train)
fit <- auto.arima(count_sales_train[,2], D = 1, seasonal = TRUE)
count_sales_train[,2]
fit <- auto.arima(count_sales_train[,2], D = 1, seasonal = TRUE)
fit <- auto.arima(count_sales_train[,2], D = 1, seasonal = TRUE)
fit
count_sales_train$bucket = as.Date(count_sales_train$bucket)
summary(count_sales_train)
View(count_sales_train)
ggplot(daily_data, aes(bucket, amount)) + geom_line() + scale_x_date('month')  + ylab("Daily Bike Checkouts") +
xlab("")
library(ggplot2)
ggplot(daily_data, aes(bucket, amount)) + geom_line() + scale_x_date('month')  + ylab("Daily Bike Checkouts") +
xlab("")
ggplot(count_sales_train, aes(bucket, amount)) + geom_line() + scale_x_date('month')  + ylab("Daily Bike Checkouts") +
xlab("")
ggplot(count_sales_train, aes(bucket, as.integer(amount))) + geom_line() + scale_x_date('month')  + ylab("Daily Bike Checkouts") +
xlab("")
ggplot(count_sales_train, aes(bucket, as.integer(amount))) + geom_line() + scale_x_date('month')  + ylab("Monthly Sales") +
xlab("")
count_sales_train$amount = as.integer(count_sales_train$amount)
xts_count_rides <- xts(count_sales_train$amount, order.by = count_sales_train$bucket)
xts_count_rides
attr(xts_count_rides, 'frequency') <- 168
fit <- auto.arima(xts_count_rides[,1], D = 1, seasonal = TRUE)
summary(fit)
fcast <- forecast(fit, h=168)
fcast
plot(fcast, include = 168, main="Taxicab Pickup Count in Times Square by Time", xlab="Date", ylab="Pickup Count", xaxt="n", col="red", fcol="blue")
ticks <- seq(3, 5, 1/7)
dates <- seq(as.Date("2016-01-15"), as.Date("2016-01-29"), by="days")
dates <- format(dates, "%m-%d %H:%M")
axis(1, at=ticks, labels=dates)
legend('topleft', legend=c("Observed Value", "Predicted Value"), col=c("red", "blue"), lwd=c(2.5,2.5))
plot(fcast, include = 168, main="Number of Sales Prediction", xlab="Date", ylab="Pickup Count", xaxt="n", col="red", fcol="blue")
ticks <- seq(3, 5, 1/7)
dates <- seq(as.Date("2016-01-15"), as.Date("2016-01-29"), by="days")
dates <- format(dates, "%m-%d %H:%M")
axis(1, at=ticks, labels=dates)
legend('topleft', legend=c("Observed Value", "Predicted Value"), col=c("red", "blue"), lwd=c(2.5,2.5))
plot(fcast, include = 168, main="Number of Sales Prediction", xlab="Date", ylab="Pickup Count", xaxt="n", col="red", fcol="blue")
ticks <- seq(3, 5, 1/7)
dates <- seq(as.Date("2017-01-15"), as.Date("2019-01-29"), by="days")
dates <- format(dates, "%m-%d %H:%M")
axis(1, at=ticks, labels=dates)
legend('topleft', legend=c("Observed Value", "Predicted Value"), col=c("red", "blue"), lwd=c(2.5,2.5))
plot(fcast, include = 168, main="Number of Sales Prediction", xlab="Date", ylab="Pickup Count", xaxt="n", col="red", fcol="blue")
ticks <- seq(3, 5, 1/7)
dates <- format(dates, "%m-%d %H:%M")
axis(1, at=ticks, labels=dates)
legend('topleft', legend=c("Observed Value", "Predicted Value"), col=c("red", "blue"), lwd=c(2.5,2.5))
rm(list = ls())
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
setwd("~/P2P-VC-R-Cli")
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
1
login("test@gmil.com","asdasd123")
login("test@gmil.com","asdasd123")
listMachines()
addJob("my_test_partial",'fibonacci.R',NULL, NULL, NULL, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
?attr
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
startVolunteer <- function(machineId, port) {
body <- list(port = port)
r <-
POST(
paste(
base_url,
paste("/machine/{", machineId, "}/startVolunteer", sep = ''),
sep = ''
),
add_headers(Authorization = paste('Bearer', user_session_token)),
body = body,
enconde = 'json'
)
if (r$status_code == 200) {
token <- fromJSON(content(r, "text"), flatten = TRUE)
v %<-% {
## healthz function o keep alive
alive <- function() {
print('hz')
tryCatch({
GET(
paste(base_url, "/volunteer/healthz", sep = ''),
add_headers(Authorization = paste('Bearer', token)),
enconde = 'json'
)
}, error = function(error_condition) {
print(error_condition)
})
}  # replace with your function
tclTaskSchedule(5000, alive, id = "alive", redo = TRUE)
}
assign("volunteer_session_token", token$token, .GlobalEnv)
print("Logged in.")
r <- plumb("volunteerREST.R")
assign("server", r, .GlobalEnv)
r$registerHook('exit',  function(req) {
print("hz stopped")
tclTaskDelete("alive")
})
r$run(port = port)
}
}
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
startVolunteer <- function(machineId, port) {
body <- list(port = port)
r <-
POST(
paste(
base_url,
paste("/machine/{", machineId, "}/startVolunteer", sep = ''),
sep = ''
),
add_headers(Authorization = paste('Bearer', user_session_token)),
body = body,
enconde = 'json'
)
if (r$status_code == 200) {
token <- fromJSON(content(r, "text"), flatten = TRUE)
v %<-% {
## healthz function o keep alive
alive <- function() {
print('hz')
tryCatch({
GET(
paste(base_url, "/volunteer/healthz", sep = ''),
add_headers(Authorization = paste('Bearer', token)),
enconde = 'json'
)
}, error = function(error_condition) {
print(error_condition)
})
}  # replace with your function
assign("alive", alive, .GlobalEnv)
tclTaskSchedule(5000, alive, id = "alive", redo = TRUE)
}
assign("volunteer_session_token", token$token, .GlobalEnv)
print("Logged in.")
r <- plumb("volunteerREST.R")
assign("server", r, .GlobalEnv)
r$registerHook('exit',  function(req) {
print("hz stopped")
tclTaskDelete("alive")
})
r$run(port = port)
}
}
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
startVolunteer <- function(machineId, port) {
body <- list(port = port)
r <-
POST(
paste(
base_url,
paste("/machine/{", machineId, "}/startVolunteer", sep = ''),
sep = ''
),
add_headers(Authorization = paste('Bearer', user_session_token)),
body = body,
enconde = 'json'
)
if (r$status_code == 200) {
token <- fromJSON(content(r, "text"), flatten = TRUE)
## healthz function o keep alive
alive <- function() {
print('hz')
tryCatch({
GET(
paste(base_url, "/volunteer/healthz", sep = ''),
add_headers(Authorization = paste('Bearer', token)),
enconde = 'json'
)
}, error = function(error_condition) {
print(error_condition)
})
}  # replace with your function
assign("alive", alive, .GlobalEnv)
tclTaskSchedule(5000, alive, id = "alive", redo = TRUE)
assign("volunteer_session_token", token$token, .GlobalEnv)
print("Logged in.")
r <- plumb("volunteerREST.R")
assign("server", r, .GlobalEnv)
r$registerHook('exit',  function(req) {
print("hz stopped")
tclTaskDelete("alive")
})
r$run(port = port)
}
}
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
startVolunteer <- function(machineId, port) {
body <- list(port = port)
r <-
POST(
paste(
base_url,
paste("/machine/{", machineId, "}/startVolunteer", sep = ''),
sep = ''
),
add_headers(Authorization = paste('Bearer', user_session_token)),
body = body,
enconde = 'json'
)
if (r$status_code == 200) {
token <- fromJSON(content(r, "text"), flatten = TRUE)
## healthz function o keep alive
alive <- function() {
print('hz')
tryCatch({
GET(
paste(base_url, "/volunteer/healthz", sep = ''),
add_headers(Authorization = paste('Bearer', token)),
enconde = 'json'
)
}, error = function(error_condition) {
print(error_condition)
})
}  # replace with your function
assign("alive", alive, .GlobalEnv)
tclTaskSchedule(5000, alive(), id = "alive", redo = TRUE)
assign("volunteer_session_token", token$token, .GlobalEnv)
print("Logged in.")
r <- plumb("volunteerREST.R")
assign("server", r, .GlobalEnv)
r$registerHook('exit',  function(req) {
print("hz stopped")
tclTaskDelete("alive")
})
v %<-% {
r$run(port = port)
}
}
}
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
startVolunteer <- function(machineId, port) {
body <- list(port = port)
r <-
POST(
paste(
base_url,
paste("/machine/{", machineId, "}/startVolunteer", sep = ''),
sep = ''
),
add_headers(Authorization = paste('Bearer', user_session_token)),
body = body,
enconde = 'json'
)
if (r$status_code == 200) {
token <- fromJSON(content(r, "text"), flatten = TRUE)
## healthz function o keep alive
alive <- function() {
print('hz')
tryCatch({
GET(
paste(base_url, "/volunteer/healthz", sep = ''),
add_headers(Authorization = paste('Bearer', token)),
enconde = 'json'
)
}, error = function(error_condition) {
print(error_condition)
})
}  # replace with your function
assign("alive", alive, .GlobalEnv)
tclTaskSchedule(5000, alive(), id = "alive", redo = TRUE)
assign("volunteer_session_token", token$token, .GlobalEnv)
print("Logged in.")
r <- plumb("volunteerREST.R")
assign("server", r, .GlobalEnv)
r$registerHook('exit',  function(req) {
print("hz stopped")
tclTaskDelete("alive")
})
r$run(port = port)
}
}
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',1234)
addJob("my_test_partial",'fibonacci.R', 0, 0, 0, 1000, "2019-08-08 15:15:15", paste(getwd(),'/fibonacci/', sep = ""))
startVolunteer('2dd34e15-27ce-44f0-aa7a-1c6e6deea987',12345)
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
install.packages("httr")
install.packages("httr")
install.packages("jsonlite")
install.packages("plumber")
install.packages("future")
install.packages("tcltk2")
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
listJobs()
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
listJobs()
register("t@h.com",1234214)
test <- function(){
print('HELLO')
}
tclTaskSchedule(10000, test, id = 'test', redo = FALSE)
tclTaskChange('test', test, 10000, redo = false)
tclTaskSchedule(10000, test, id = 'test', redo = FALSE)
tclTaskChange('test', test, 10000, redo = false)
tclTaskChange('test', test, 10000, redo = FALSE)
base_i = 0
test <- function(){
base_i++
}
test <- function(){
base_i=base_i + 1
}
tclTaskSchedule(10000, test, id = 'test', redo = FALSE)
tclTaskChange('test', test, 10000, redo = FALSE)
tclTaskSchedule(10000, test(), id = 'test', redo = FALSE)
tclTaskChange('test', test(), 10000, redo = FALSE)
base_i
test <- function () cat("==== Hello from Tcl! ====\n")
tclTaskSchedule(1000, test())
tclTaskSchedule(10000, test(), id = 'test', redo = FALSE)
tclTaskSchedule(10000, test(), id = 'test', redo = FALSE)
tclTaskChange('test', test(), 10000, redo = FALSE)
test <- function (i) cat("==== Hello from Tcl " + i + "! ====\n")
tclTaskSchedule(1000, test(1), id = 'test', redo = FALSE)
test <- function (i) cat(paste("==== Hello from Tcl", i , "! ====\n"))
tclTaskSchedule(1000, test(1), id = 'test', redo = FALSE)
tclTaskChange('test', test(2), 10000, redo = FALSE)
tclTaskSchedule(1000, test(1), id = 'test', redo = FALSE)
tclTaskChange('test', test(2), 10000, redo = FALSE)
tclTaskSchedule(10000, test(1), id = 'test', redo = FALSE)
tclTaskChange('test', test(2), 10000, redo = FALSE)
install.packages("httr")
install.packages("jsonlite")
install.packages("plumber")
install.packages("future")
install.packages("tcltk2")
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
register("a@a.c",1234)
addMachine('d',100000, 100000000, 10000000000, 1)
addMachine('d',100000, 100000000, 100000, 1)
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f')
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
library(httr)
library(jsonlite)
library(plumber)
library(future)
library(tcltk2)
.remotIST <- new.env()
source('./config.R')
source('./auth.R')
source('./machine.R')
source('./job.R')
source('./volunteer.R')
startVolunteer('e0f9aaca-53c3-4039-826e-a999a844fe6f',1234)
tclTaskSchedule(500, alive(), id = "alive", redo = TRUE)
